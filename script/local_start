#!/usr/bin/env zsh
#
# Script setting up local dev environment for a Phoenix application.
# Assumes osx with zsh and docker desktop are present.

echo "This script will do the following if needed:\n"
echo " - install asdf to manage erlang and elixir versions. See: https://asdf-vm.com/ \n"
echo " - add asdf to your zshrc \n"
echo " - source your zshrc one or more times \n"
echo " - install latest erlang and elixir using asdf for the current dir and parent dir as well \n"

printf 'OK to continue (y/n)? '
read answer
if [ "$answer" != "${answer#[Yy]}" ] ;then 
else
  exit 1
fi

RED='\033[0;31m'
FRM='\033[1;37m'
TXT='\033[0;33m'
NC='\033[0m' # No Color

spin()
{
  #spinner="◴◷◶◵◴◷◶◵"
  #spinner="▉▊▋▌▍▎▏▎▍▌▋▊▉"
  #spinner="←↖↑↗→↘↓↙"
  spinner="⣾⣽⣻⢿⡿⣟⣯⣷"
  #spinner="⠁⠂⠄⡀⢀⠠⠐⠈"
  while :
  do
    for i in `seq 0 7`
    do
      echo -n "${spinner:$i:1}"
      echo -en "\010"
      if ! ((i % 8)); then
        echo -n "▉"
      fi
      sleep 0.5 
    done
  done
}

msg()
{
  xx="--------------------------------------------------------------------------------------------------------------"
  ln="${xx:0:${#${1}}}"
  printf "${FRM} ${ln} \n"
  printf "${TXT} $1 ${FRM}\n"
  printf " ${ln} ${NC}\n"
}

#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check and add asdf.sh to your ~/.zshrc if needed with:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if grep -q "asdf" ~/.zshrc; then
  echo '✓ asdf presest' 
else
  msg "Installing asdf"
  spin &
  SPIN_ID=$!
  trap "kill -9 $SPIN_ID" `seq 0 15`
  brew update
  brew install asdf
  echo -e "\n. $(brew --prefix asdf)/libexec/asdf.sh" >> ${ZDOTDIR:-~}/.zshrc
  source ~/.zshrc
  kill -9 $SPIN_ID
  echo -n "▉\n"
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install asdf plugins for erlang/elixir in app dir 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
msg "asd adding erlash/elixir latest"
asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
asdf install erlang latest
asdf install elixir latest
asdf local erlang latest
asdf local elixir latest
asdf install

app_dir=${PWD##*/}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create Phoenix application if it does not exist with:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [[ -f "mix.exs" ]]
then
  echo "Application $app_dir exists!"
  source ~/.zshrc
else
  msg "Creating new $app_dir phoenix application"
  cd ..
  echo "Using latest erlang/elixir"
  asdf local erlang latest
  asdf local elixir latest
  asdf install
  source ~/.zshrc
  yes Y \n| mix local.hex --if-missing
  yes Y \n| mix archive.install hex phx_new
  yes Y \n| mix phx.new $app_dir
  cd $app_dir
  echo "Removing unneeded gettext from mix.exs"
  sed -i '' -e '/compilers.*gettext/d' mix.exs
fi

set -euo pipefail

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Spin database in docker
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
msg "Launching database in docker container"
if (! docker stats --no-stream ); then
  echo "Launching Docker Daemon..."
  spin &
  SPIN_ID=$!
  trap "kill -9 $SPIN_ID" `seq 0 15`
  open /Applications/Docker.app
  while (! docker stats --no-stream > /dev/null 2>&1); do
    sleep 1
  done
  kill -9 $SPIN_ID
  echo -n "▉\n"
fi

echo "Starting a Postgres database in a docker container"
spin &
SPIN_ID=$!
trap "kill -9 $SPIN_ID" `seq 0 15`
if (! docker-compose run --rm postgres psql postgresql://postgres:postgres@postgres/template1 -c select 1 > /dev/null 2>&1); then
  docker-compose -f docker-compose.yml up --no-recreate -d postgres
fi
while true
do
  docker-compose run --rm postgres psql postgresql://postgres:postgres@postgres/template1 -c select 1 > /dev/null 2>&1 \
  && break
done
kill -9 $SPIN_ID
echo -n "▉\n"

# Get deps, compile, create database  and run migrations
msg "Launching Phoenix application"
echo "compiling application"
mix local.hex --if-missing
mix local.rebar --force
mix do deps.get, deps.compile, ecto.create, ecto.migrate
MIX_ENV=dev mix do deps.compile, ecto.create, ecto.migrate
#npm install --prefix assets/

echo "Running server..."
open http://localhost:4000 & mix phx.server
